generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model configuration {
  id_configuration Int    @id
  color_palette    String @db.VarChar(100)
  language         String @db.VarChar(5)
  user             user[]
}

model location {
  id_location     Int        @id
  location_name   String     @db.VarChar(200)
  location_parent Int?
  location_type   String?    @db.VarChar(1)
  location        location?  @relation("locationTolocation", fields: [location_parent], references: [id_location], onDelete: NoAction, onUpdate: NoAction, map: "LOC_LOC_FK")
  other_location  location[] @relation("locationTolocation")
  user            user[]

  @@index([location_parent], map: "LOC_LOC_FK_idx")
}

model user {
  id_user          Int            @id @default(autoincrement())
  fullname         String         @db.VarChar(200)
  username         String         @unique(map: "username_UNIQUE") @db.VarChar(100)
  password         String         @db.VarChar(100)
  description      String?        @db.VarChar(100)
  user_img         String?        @db.VarChar(250)
  configuration_id Int?
  location_id      Int?
  role             String         @db.VarChar(30)
  id_number        String         @db.VarChar(10)
  phone            String         @db.VarChar(10)
  email            String         @db.VarChar(100)
  direction        String         @db.VarChar(100)
  configuration    configuration? @relation(fields: [configuration_id], references: [id_configuration], onDelete: NoAction, onUpdate: NoAction, map: "PRO_CON_FK")
  location         location?      @relation(fields: [location_id], references: [id_location], onDelete: NoAction, onUpdate: NoAction, map: "PRO_LOC")

  @@index([configuration_id], map: "PRO_CON_FK_idx")
  @@index([location_id], map: "PRO_LOC_idx")
}

model inventory {
  id_product Int
  id_user    Int
  quantity   Int?
  unit_price Int?

  @@id([id_product, id_user])
}

model product {
  id_product       Int              @id
  product_name     String           @db.VarChar(50)
  variety          String           @db.VarChar(50)
  unit_measure     String           @db.VarChar(50)
  description      String?          @db.VarChar(200)
  time_period_size String           @db.VarChar(10)
  time_period_type String           @db.VarChar(45)
  product_images   product_images[]
}

model review {
  id_review         Int     @id
  calification_rate Int
  description       String? @db.VarChar(200)
}

model sale {
  id_sale         Int      @id
  sale_date       DateTime @db.Date
  sale_status     String   @db.VarChar(1)
  payment_method  String   @db.VarChar(1)
  delivery_status String   @db.VarChar(1)
  is_paid         Int      @db.TinyInt
  id_user         Int
  id_product      Int
}

model sales_detail {
  id_product Int
  id_sales   String @db.VarChar(45)
  unit_price Int
  amount     Int

  @@id([id_product, id_sales])
}

model product_images {
  id_product_images Int     @id @default(autoincrement())
  id_product        Int
  url_image         String  @db.VarChar(250)
  product           product @relation(fields: [id_product], references: [id_product], onDelete: NoAction, onUpdate: NoAction, map: "IMG_PRO_FK")

  @@index([id_product], map: "IMG_PRO_FK_idx")
}
